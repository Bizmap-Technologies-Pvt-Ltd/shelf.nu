generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Image {
  id           String        @id @default(cuid())
  contentType  String
  altText      String?
  blob         Bytes
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  ownerOrgId   String
  ownerOrg     Organization  @relation("owner", fields: [ownerOrgId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id])
  location     Location?
  organization Organization? @relation("orgImage")

  @@index([ownerOrgId])
  @@index([userId])
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  profilePicture        String?
  firstName             String?
  lastName              String?
  username              String                 @unique @default(cuid())
  onboarded             Boolean                @default(false)
  customerId            String?                @unique
  tierId                TierId                 @default(free)
  usedFreeTrial         Boolean                @default(false)
  sso                   Boolean                @default(false)
  createdWithInvite     Boolean                @default(false)
  deletedAt             DateTime?
  assets                Asset[]
  assetIndexSettings    AssetIndexSettings[]
  assetReminders        AssetReminder[]
  bookings              Booking[]              @relation("creator")
  custodies             Booking[]              @relation("custodian")
  categories            Category[]
  customFields          CustomField[]
  customTierLimit       CustomTierLimit?
  images                Image[]
  receivedInvites       Invite[]               @relation("invitee")
  sentInvites           Invite[]               @relation("inviter")
  createdKits           Kit[]
  locations             Location[]
  notes                 Note[]
  organizations         Organization[]
  qrCodes               Qr[]
  reconciliationBundles ReconciliationBundle[]
  scans                 Scan[]
  tags                  Tag[]
  teamMembers           TeamMember[]
  tier                  Tier                   @relation(fields: [tierId], references: [id])
  userOrganizations     UserOrganization[]
  roles                 Role[]                 @relation("RoleToUser")

  @@unique([email, username])
  @@index([firstName, lastName])
  @@index([tierId])
}

model Asset {
  id                  String                  @id @default(cuid())
  title               String
  description         String?
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  userId              String
  mainImage           String?
  mainImageExpiration DateTime?
  categoryId          String?
  locationId          String?
  organizationId      String
  status              AssetStatus             @default(AVAILABLE)
  valuation           Float?                  @map("value")
  availableToBook     Boolean                 @default(true)
  kitId               String?
  thumbnailImage      String?
  rfid                String?
  category            Category?               @relation(fields: [categoryId], references: [id])
  kit                 Kit?                    @relation(fields: [kitId], references: [id])
  location            Location?               @relation(fields: [locationId], references: [id])
  organization        Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  customFields        AssetCustomFieldValue[]
  reminders           AssetReminder[]
  custody             Custody?
  notes               Note[]
  qrCodes             Qr[]
  reconciliationItems ReconciliationItem[]
  reports             ReportFound[]
  bookings            Booking[]               @relation("AssetToBooking")
  tags                Tag[]                   @relation("AssetToTag")

  @@index([title(ops: raw("gin_trgm_ops")), description(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([organizationId, title, status, availableToBook], map: "Asset_organizationId_compound_idx")
  @@index([status, organizationId])
  @@index([createdAt, organizationId])
  @@index([valuation, organizationId], map: "Asset_valuation_organizationId_idx")
  @@index([categoryId, organizationId])
  @@index([locationId, organizationId])
  @@index([kitId, organizationId])
  @@index([userId])
}

model AssetIndexSettings {
  id             String         @id @default(cuid())
  userId         String
  organizationId String
  mode           AssetIndexMode @default(SIMPLE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  columns        Json           @default("[{\"name\": \"id\", \"visible\": true, \"position\": 0}, {\"name\": \"status\", \"visible\": true, \"position\": 1}, {\"name\": \"description\", \"visible\": true, \"position\": 2}, {\"name\": \"valuation\", \"visible\": true, \"position\": 3}, {\"name\": \"createdAt\", \"visible\": true, \"position\": 4}, {\"name\": \"category\", \"visible\": true, \"position\": 5}, {\"name\": \"tags\", \"visible\": true, \"position\": 6}, {\"name\": \"location\", \"visible\": true, \"position\": 7}, {\"name\": \"kit\", \"visible\": true, \"position\": 8}, {\"name\": \"custody\", \"visible\": true, \"position\": 9}]")
  freezeColumn   Boolean        @default(true)
  showAssetImage Boolean        @default(true)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Category {
  id             String        @id @default(cuid())
  name           String
  description    String?
  color          String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String
  organizationId String
  assets         Asset[]
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id])
  customFields   CustomField[] @relation("CategoryToCustomField")

  @@index([organizationId])
  @@index([userId])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Tag {
  id             String       @id @default(cuid())
  name           String
  description    String?
  userId         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id])
  assets         Asset[]      @relation("AssetToTag")

  @@index([organizationId])
  @@index([userId])
}

model Note {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  assetId   String
  type      NoteType @default(COMMENT)
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([assetId])
  @@index([userId])
}

model Qr {
  id              String          @id @default(cuid())
  version         Int             @default(0)
  errorCorrection ErrorCorrection @default(L)
  userId          String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  assetId         String?
  organizationId  String?
  batchId         String?
  kitId           String?
  asset           Asset?          @relation(fields: [assetId], references: [id])
  batch           PrintBatch?     @relation(fields: [batchId], references: [id])
  kit             Kit?            @relation(fields: [kitId], references: [id])
  organization    Organization?   @relation(fields: [organizationId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])
  scans           Scan[]

  @@index([assetId])
  @@index([kitId])
  @@index([userId])
  @@index([organizationId])
  @@index([batchId])
}

model PrintBatch {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  printed   Boolean  @default(false)
  qrCodes   Qr[]
}

model ReportFound {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  assetId   String?
  kitId     String?
  asset     Asset?   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  kit       Kit?     @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([kitId])
}

model Scan {
  id                String   @id @default(cuid())
  latitude          String?
  longitude         String?
  userAgent         String?
  userId            String?
  qrId              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  rawQrId           String
  manuallyGenerated Boolean  @default(false)
  qr                Qr?      @relation(fields: [qrId], references: [id])
  user              User?    @relation(fields: [userId], references: [id])

  @@index([qrId])
  @@index([userId])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Location {
  id                    String                 @id @default(cuid())
  name                  String
  description           String?
  address               String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  userId                String
  imageId               String?                @unique
  organizationId        String
  imageUrl              String?
  thumbnailUrl          String?
  assets                Asset[]
  image                 Image?                 @relation(fields: [imageId], references: [id])
  organization          Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  reconciliationBundles ReconciliationBundle[]

  @@index([organizationId])
  @@index([userId])
}

model Role {
  id        String   @id @default(cuid())
  name      Roles    @unique @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]   @relation("RoleToUser")
}

model TeamMember {
  id              String          @id @default(cuid())
  name            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?
  deletedAt       DateTime?
  organizationId  String
  bookings        Booking[]
  custodies       Custody[]
  receivedInvites Invite[]
  kitCustodies    KitCustody[]
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User?           @relation(fields: [userId], references: [id])
  assetReminders  AssetReminder[] @relation("AssetReminderToTeamMember")

  @@index([name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([organizationId])
  @@index([userId])
}

model Custody {
  id           String     @id @default(cuid())
  teamMemberId String
  assetId      String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  asset        Asset      @relation(fields: [assetId], references: [id], onDelete: Cascade)
  custodian    TeamMember @relation(fields: [teamMemberId], references: [id])

  @@index([assetId, teamMemberId])
  @@index([teamMemberId])
}

model Organization {
  id                        String                 @id @default(cuid())
  name                      String                 @default("Personal")
  type                      OrganizationType       @default(PERSONAL)
  userId                    String
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  imageId                   String?                @unique
  currency                  Currency               @default(USD)
  enabledSso                Boolean                @default(false)
  ssoDetailsId              String?
  workspaceDisabled         Boolean                @default(false)
  baseUserCanSeeBookings    Boolean                @default(false)
  baseUserCanSeeCustody     Boolean                @default(false)
  selfServiceCanSeeBookings Boolean                @default(false)
  selfServiceCanSeeCustody  Boolean                @default(false)
  assets                    Asset[]
  assetIndexSettings        AssetIndexSettings[]
  assetReminders            AssetReminder[]
  bookings                  Booking[]
  bookingSettings           BookingSettings?
  categories                Category[]
  customFields              CustomField[]
  images                    Image[]                @relation("owner")
  invites                   Invite[]
  kits                      Kit[]
  locations                 Location[]
  image                     Image?                 @relation("orgImage", fields: [imageId], references: [id])
  ssoDetails                SsoDetails?            @relation(fields: [ssoDetailsId], references: [id])
  owner                     User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  qrCodes                   Qr[]
  reconciliationBundles     ReconciliationBundle[]
  tags                      Tag[]
  members                   TeamMember[]
  userOrganizations         UserOrganization[]
  workingHours              WorkingHours?

  @@index([userId])
  @@index([ssoDetailsId])
}

model UserOrganization {
  id             String              @id @default(cuid())
  userId         String
  organizationId String
  roles          OrganizationRoles[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  organization   Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

model SsoDetails {
  id                 String         @id @default(cuid())
  domain             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  adminGroupId       String?
  selfServiceGroupId String?
  baseUserGroupId    String?
  organizations      Organization[]
}

model Tier {
  id          TierId     @id
  name        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tierLimitId TierId?    @unique
  tierLimit   TierLimit? @relation(fields: [tierLimitId], references: [id])
  subscribers User[]
}

model TierLimit {
  id               TierId   @id
  canImportAssets  Boolean  @default(false)
  canExportAssets  Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  maxCustomFields  Int      @default(0)
  maxOrganizations Int      @default(1)
  canImportNRM     Boolean  @default(false)
  tier             Tier?
}

model CustomTierLimit {
  id               String   @id @default(cuid())
  userId           String?  @unique
  canImportAssets  Boolean  @default(true)
  canExportAssets  Boolean  @default(true)
  maxCustomFields  Int      @default(1000)
  maxOrganizations Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  canImportNRM     Boolean  @default(true)
  isEnterprise     Boolean  @default(false)
  user             User?    @relation(fields: [userId], references: [id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model CustomField {
  id                      String                  @id @default(cuid())
  name                    String
  helpText                String?
  required                Boolean                 @default(false)
  type                    CustomFieldType         @default(TEXT)
  organizationId          String
  userId                  String
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  active                  Boolean                 @default(true)
  options                 String[]
  assetCustomFieldsValues AssetCustomFieldValue[]
  organization            Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy               User                    @relation(fields: [userId], references: [id])
  categories              Category[]              @relation("CategoryToCustomField")

  @@index([organizationId])
  @@index([userId])
}

model AssetCustomFieldValue {
  id            String      @id @default(cuid())
  assetId       String
  customFieldId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  value         Json
  asset         Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)

  @@index([assetId, customFieldId], map: "AssetCustomFieldValue_lookup_idx")
  @@index([customFieldId])
}

model Invite {
  id                String              @id @default(cuid())
  inviterId         String
  organizationId    String
  inviteeUserId     String?
  teamMemberId      String
  inviteeEmail      String
  status            InviteStatuses      @default(PENDING)
  inviteCode        String
  roles             OrganizationRoles[]
  expiresAt         DateTime
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  inviteeUser       User?               @relation("invitee", fields: [inviteeUserId], references: [id], onDelete: Cascade)
  inviter           User                @relation("inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  organization      Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviteeTeamMember TeamMember          @relation(fields: [teamMemberId], references: [id])

  @@index([inviteeUserId])
  @@index([inviterId])
  @@index([organizationId])
  @@index([teamMemberId])
}

model Announcement {
  id        String   @id @default(cuid())
  name      String
  content   String
  link      String?
  linkText  String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id                       String        @id @default(cuid())
  name                     String
  status                   BookingStatus @default(DRAFT)
  creatorId                String
  organizationId           String
  createdAt                DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime      @updatedAt @db.Timestamptz(3)
  from                     DateTime?     @db.Timestamptz(3)
  to                       DateTime?     @db.Timestamptz(3)
  custodianTeamMemberId    String?
  custodianUserId          String?
  activeSchedulerReference String?
  description              String?       @default("")
  originalFrom             DateTime?     @db.Timestamptz(3)
  originalTo               DateTime?     @db.Timestamptz(3)
  creator                  User          @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  custodianTeamMember      TeamMember?   @relation(fields: [custodianTeamMemberId], references: [id], onDelete: Cascade)
  custodianUser            User?         @relation("custodian", fields: [custodianUserId], references: [id], onDelete: Cascade)
  organization             Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assets                   Asset[]       @relation("AssetToBooking")

  @@index([creatorId])
  @@index([custodianTeamMemberId])
  @@index([custodianUserId])
  @@index([organizationId])
}

model BookingSettings {
  id              String       @id @default(cuid())
  bufferStartTime Int          @default(0)
  organizationId  String       @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model Kit {
  id              String        @id @default(cuid())
  name            String
  description     String?
  status          KitStatus     @default(AVAILABLE)
  image           String?
  imageExpiration DateTime?
  organizationId  String
  createdById     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  assets          Asset[]
  createdBy       User          @relation(fields: [createdById], references: [id])
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  custody         KitCustody?
  qrCodes         Qr[]
  reports         ReportFound[]

  @@index([createdById])
  @@index([organizationId])
}

model KitCustody {
  id          String     @id @default(cuid())
  custodianId String
  kitId       String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  custodian   TeamMember @relation(fields: [custodianId], references: [id])
  kit         Kit        @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@index([custodianId])
}

model AssetReminder {
  id                       String       @id @default(cuid())
  name                     String
  message                  String
  alertDateTime            DateTime
  assetId                  String
  createdById              String
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  organizationId           String
  activeSchedulerReference String?
  asset                    Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  createdBy                User         @relation(fields: [createdById], references: [id])
  organization             Organization @relation(fields: [organizationId], references: [id])
  teamMembers              TeamMember[] @relation("AssetReminderToTeamMember")

  @@index([assetId, alertDateTime])
  @@index([name(ops: raw("gin_trgm_ops")), message(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([organizationId, alertDateTime, assetId])
  @@index([alertDateTime, activeSchedulerReference])
  @@index([createdById])
}

model WorkingHours {
  id             String                 @id @default(cuid())
  enabled        Boolean                @default(false)
  weeklySchedule Json                   @default("{\"0\": {\"isOpen\": false}, \"1\": {\"isOpen\": true, \"openTime\": \"09:00\", \"closeTime\": \"17:00\"}, \"2\": {\"isOpen\": true, \"openTime\": \"09:00\", \"closeTime\": \"17:00\"}, \"3\": {\"isOpen\": true, \"openTime\": \"09:00\", \"closeTime\": \"17:00\"}, \"4\": {\"isOpen\": true, \"openTime\": \"09:00\", \"closeTime\": \"17:00\"}, \"5\": {\"isOpen\": true, \"openTime\": \"09:00\", \"closeTime\": \"17:00\"}, \"6\": {\"isOpen\": false}}")
  organizationId String                 @unique
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  organization   Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  overrides      WorkingHoursOverride[]

  @@index([organizationId])
}

model WorkingHoursOverride {
  id             String       @id @default(cuid())
  date           DateTime     @db.Date
  isOpen         Boolean      @default(false)
  openTime       String?
  closeTime      String?
  reason         String?
  workingHoursId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  workingHours   WorkingHours @relation(fields: [workingHoursId], references: [id], onDelete: Cascade)

  @@unique([workingHoursId, date])
  @@index([workingHoursId, date])
  @@index([date, isOpen])
}

model ReconciliationBundle {
  id             String               @id @default(cuid())
  bundleId       String               @unique
  date           DateTime             @default(now())
  status         ReconciliationStatus @default(COMPLETED)
  locationId     String
  userId         String
  organizationId String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  location       Location             @relation(fields: [locationId], references: [id])
  organization   Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  scannedBy      User                 @relation(fields: [userId], references: [id])
  items          ReconciliationItem[]

  @@index([organizationId])
  @@index([locationId])
  @@index([userId])
  @@index([date])
}

model ReconciliationItem {
  id               String               @id @default(cuid())
  rfidTag          String
  assetId          String?
  assetName        String
  category         String?
  status           String?
  location         String?
  locationMismatch Boolean              @default(false)
  bundleId         String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  asset            Asset?               @relation(fields: [assetId], references: [id])
  bundle           ReconciliationBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)

  @@index([bundleId])
  @@index([rfidTag])
  @@index([assetId])
}

enum AssetStatus {
  AVAILABLE
  IN_CUSTODY
  CHECKED_OUT
}

enum AssetIndexMode {
  SIMPLE
  ADVANCED
}

enum NoteType {
  COMMENT
  UPDATE
}

enum ErrorCorrection {
  L
  M
  Q
  H
}

enum Roles {
  USER
  ADMIN
}

enum OrganizationType {
  PERSONAL
  TEAM
}

enum OrganizationRoles {
  ADMIN
  OWNER
  SELF_SERVICE
  BASE
}

enum TierId {
  free
  tier_1
  tier_2
  custom
}

enum CustomFieldType {
  TEXT
  OPTION
  BOOLEAN
  DATE
  MULTILINE_TEXT
  AMOUNT
}

enum Currency {
  USD
  EUR
  GBP
  JPY
  AUD
  CAD
  CHF
  CNY
  INR
  ZAR
  BRL
  MXN
  SGD
  NZD
  SEK
  NOK
  KRW
  RUB
  HKD
  SAR
  AED
  DKK
  PLN
  MYR
  IDR
  CZK
  LKR
  PHP
  PKR
}

enum InviteStatuses {
  PENDING
  ACCEPTED
  REJECTED
  INVALIDATED
}

enum BookingStatus {
  DRAFT
  RESERVED
  ONGOING
  OVERDUE
  COMPLETE
  ARCHIVED
  CANCELLED
}

enum KitStatus {
  AVAILABLE
  IN_CUSTODY
  CHECKED_OUT
}

enum ReconciliationStatus {
  COMPLETED
  IN_PROGRESS
}
